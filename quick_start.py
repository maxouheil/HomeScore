#!/usr/bin/env python3
"""
Script de d√©marrage rapide pour HomeScore
"""

import os
import sys
import subprocess
from dotenv import load_dotenv

def check_requirements():
    """V√©rifie que les pr√©requis sont install√©s"""
    print("üîç V√©rification des pr√©requis...")
    
    try:
        import playwright
        import openai
        import requests
        from dotenv import load_dotenv
        print("‚úÖ Modules Python install√©s")
    except ImportError as e:
        print(f"‚ùå Module manquant: {e}")
        print("üí° Ex√©cutez: pip install -r requirements.txt")
        return False
    
    return True

def check_environment():
    """V√©rifie les variables d'environnement"""
    print("üîç V√©rification de l'environnement...")
    
    load_dotenv()
    
    if not os.getenv('JINKA_EMAIL'):
        print("‚ùå JINKA_EMAIL non d√©fini")
        return False
    
    if not os.getenv('JINKA_PASSWORD'):
        print("‚ùå JINKA_PASSWORD non d√©fini")
        return False
    
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ùå OPENAI_API_KEY non d√©fini")
        return False
    
    print("‚úÖ Variables d'environnement OK")
    return True

def install_playwright():
    """Installe Playwright si n√©cessaire"""
    print("üîç V√©rification de Playwright...")
    
    try:
        from playwright.sync_api import sync_playwright
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            browser.close()
        print("‚úÖ Playwright OK")
        return True
    except:
        print("üì¶ Installation de Playwright...")
        try:
            subprocess.run([sys.executable, "-m", "playwright", "install", "chromium"], check=True)
            print("‚úÖ Playwright install√©")
            return True
        except:
            print("‚ùå Erreur installation Playwright")
            return False

def run_test():
    """Ex√©cute les tests"""
    print("üß™ Ex√©cution des tests...")
    
    try:
        result = subprocess.run([sys.executable, "test_homescore.py"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Tests r√©ussis")
            return True
        else:
            print("‚ùå Tests √©chou√©s")
            print(result.stdout)
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå Erreur tests: {e}")
        return False

def show_usage():
    """Affiche les instructions d'utilisation"""
    print("\n" + "="*60)
    print("üè† HomeScore - Pr√™t √† l'emploi!")
    print("="*60)
    print("\nüìã Commandes disponibles:")
    print("  python test_homescore.py          # Tester le syst√®me")
    print("  python explore_jinka_api.py       # Explorer les APIs Jinka")
    print("  python scrape_jinka.py <URL>      # Scraper une alerte")
    print("  python score_appartement.py       # Scorer les appartements")
    print("  python generate_html_report.py    # G√©n√©rer le rapport")
    print("  python run_daily_scrape.py        # Automatisation quotidienne")
    print("\nüöÄ D√©marrage rapide:")
    print("  1. Modifiez l'URL dans config.json avec votre alerte Jinka")
    print("  2. python scrape_jinka.py 'VOTRE_URL_ALERTE'")
    print("  3. python score_appartement.py")
    print("  4. python generate_html_report.py")
    print("  5. Ouvrez output/rapport_appartements.html")
    print("\nüìÅ Fichiers importants:")
    print("  .env                    # Vos identifiants (√† cr√©er)")
    print("  config.json            # Configuration")
    print("  output/rapport_appartements.html  # Rapport final")

def main():
    """Fonction principale"""
    print("üè† HomeScore - Configuration initiale")
    print("="*50)
    
    # V√©rifier les pr√©requis
    if not check_requirements():
        print("\n‚ùå Pr√©requis manquants. Installez-les avec:")
        print("   pip install -r requirements.txt")
        return False
    
    # V√©rifier l'environnement
    if not check_environment():
        print("\n‚ùå Variables d'environnement manquantes.")
        print("üí° Cr√©ez un fichier .env avec:")
        print("   JINKA_EMAIL=votre_email@gmail.com")
        print("   JINKA_PASSWORD=votre_mot_de_passe")
        print("   OPENAI_API_KEY=votre_cle_openai")
        return False
    
    # Installer Playwright si n√©cessaire
    if not install_playwright():
        return False
    
    # Ex√©cuter les tests
    if not run_test():
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©, mais HomeScore peut fonctionner")
    
    # Afficher les instructions
    show_usage()
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
