#!/usr/bin/env python3
"""
D√©monstration du syst√®me d'extraction d'exposition
Montre les capacit√©s Phase 1 + Phase 2
"""

from extract_exposition import ExpositionExtractor

def demo_exposition_system():
    """D√©monstration interactive du syst√®me d'exposition"""
    print("üß≠ D√âMONSTRATION DU SYST√àME D'EXPOSITION")
    print("=" * 60)
    print("Phase 1: Analyse textuelle ‚úÖ")
    print("Phase 2: Analyse des photos ‚úÖ")
    print("Phase 1+2: Analyse combin√©e ‚úÖ")
    print()
    
    extractor = ExpositionExtractor()
    
    # Exemples d'appartements r√©els
    apartments = [
        {
            'name': 'üè† Appartement Haussmannien Sud',
            'description': 'Magnifique appartement haussmannien r√©nov√© avec exposition Sud, tr√®s lumineux toute la journ√©e, vue d√©gag√©e sur cour calme, hauteur sous plafond 3.20m',
            'caracteristiques': 'Parquet, moulures, chemin√©e, balcon, ascenseur',
            'photos': ['https://example.com/photo1.jpg', 'https://example.com/photo2.jpg']
        },
        {
            'name': 'üè¢ Duplex Moderne Ouest',
            'description': 'Duplex contemporain avec orientation Ouest, bien √©clair√©, vue semi-d√©gag√©e sur la rue, luminosit√© correcte',
            'caracteristiques': 'Ascenseur, parking, cave, balcon',
            'photos': ['https://example.com/photo1.jpg']
        },
        {
            'name': 'üèòÔ∏è Studio Nord Probl√©matique',
            'description': 'Studio au 1er √©tage, exposition Nord, vis-√†-vis, peu lumineux, vue limit√©e',
            'caracteristiques': 'Ascenseur, cave',
            'photos': []
        },
        {
            'name': 'üåü Loft Atypique Sud-Ouest',
            'description': 'Loft am√©nag√© exceptionnel avec exposition Sud-Ouest, tr√®s lumineux toute la journ√©e, vue panoramique sur Paris, pas de vis-√†-vis',
            'caracteristiques': 'Terrasse, balcon, hauteur sous plafond 3.50m, ascenseur',
            'photos': ['https://example.com/photo1.jpg', 'https://example.com/photo2.jpg', 'https://example.com/photo3.jpg']
        }
    ]
    
    print("üìã ANALYSE DE 4 APPARTEMENTS TYPES")
    print("=" * 60)
    
    for i, apt in enumerate(apartments, 1):
        print(f"\n{i}. {apt['name']}")
        print(f"   üìù Description: {apt['description']}")
        print(f"   üèóÔ∏è Caract√©ristiques: {apt['caracteristiques']}")
        print(f"   üì∏ Photos: {len(apt['photos'])}")
        
        # Analyse compl√®te
        result = extractor.extract_exposition_complete(
            apt['description'],
            apt['caracteristiques'],
            apt['photos']
        )
        
        # Affichage des r√©sultats
        print(f"   üß≠ R√âSULTATS:")
        print(f"      Exposition: {result['exposition'] or 'Non sp√©cifi√©e'}")
        print(f"      Score: {result['score']}/10")
        print(f"      Tier: {result['tier']}")
        print(f"      Luminosit√©: {result['luminosite']}")
        print(f"      Vue: {result['vue']}")
        print(f"      Photos analys√©es: {result.get('photos_analyzed', 0)}")
        print(f"      Justification: {result['justification']}")
        
        # Score pour le syst√®me de scoring
        if result['tier'] == 'tier1':
            score_final = 10
            emoji = "üåü"
        elif result['tier'] == 'tier2':
            score_final = 7
            emoji = "üëç"
        else:
            score_final = 3
            emoji = "‚ö†Ô∏è"
        
        print(f"      {emoji} Score final pour le scoring: {score_final}/10")

def demo_scoring_integration():
    """D√©monstration de l'int√©gration avec le scoring"""
    print(f"\nüéØ INT√âGRATION AVEC LE SYST√àME DE SCORING")
    print("=" * 60)
    
    # Simulation d'un appartement avec scoring complet
    apartment_data = {
        'id': 'demo_001',
        'titre': 'Appartement Haussmannien Sud',
        'prix': 2500,
        'surface': 70,
        'exposition': {
            'exposition': 'sud',
            'score': 10,
            'tier': 'tier1',
            'justification': 'Excellente exposition Sud',
            'luminosite': 'excellent',
            'vue': 'excellent'
        }
    }
    
    print("üìä Donn√©es de l'appartement:")
    print(f"   ID: {apartment_data['id']}")
    print(f"   Titre: {apartment_data['titre']}")
    print(f"   Prix: {apartment_data['prix']}‚Ç¨")
    print(f"   Surface: {apartment_data['surface']}m¬≤")
    
    print(f"\nüß≠ Donn√©es d'exposition:")
    expo = apartment_data['exposition']
    print(f"   Exposition: {expo['exposition']}")
    print(f"   Score: {expo['score']}/10")
    print(f"   Tier: {expo['tier']}")
    print(f"   Luminosit√©: {expo['luminosite']}")
    print(f"   Vue: {expo['vue']}")
    
    # Calcul du score final pour l'axe Ensoleillement
    ensoleillement_score = expo['score']
    ensoleillement_tier = expo['tier']
    
    print(f"\nüéØ Score final pour l'axe Ensoleillement:")
    print(f"   Score: {ensoleillement_score}/10")
    print(f"   Tier: {ensoleillement_tier}")
    print(f"   Points attribu√©s: {ensoleillement_score} points")
    
    if ensoleillement_tier == 'tier1':
        print(f"   ‚úÖ Excellent - Candidat prioritaire")
    elif ensoleillement_tier == 'tier2':
        print(f"   üëç Bon potentiel")
    else:
        print(f"   ‚ö†Ô∏è √Ä reconsid√©rer")

def demo_advanced_features():
    """D√©monstration des fonctionnalit√©s avanc√©es"""
    print(f"\nüöÄ FONCTIONNALIT√âS AVANC√âES")
    print("=" * 60)
    
    extractor = ExpositionExtractor()
    
    # Test de d√©tection de luminosit√©
    print("üí° Test de d√©tection de luminosit√©:")
    luminosite_tests = [
        "tr√®s lumineux",
        "bien √©clair√©", 
        "assez lumineux",
        "peu lumineux"
    ]
    
    for test in luminosite_tests:
        result = extractor.extract_exposition_textuelle(f"Appartement {test}", "")
        print(f"   '{test}' ‚Üí {result['luminosite']} (score: {result['details']['luminosite_score']})")
    
    # Test de d√©tection de vue
    print(f"\nüëÅÔ∏è Test de d√©tection de vue:")
    vue_tests = [
        "vue d√©gag√©e sur le parc",
        "vue correcte sur la rue",
        "vue limit√©e",
        "vis-√†-vis"
    ]
    
    for test in vue_tests:
        result = extractor.extract_exposition_textuelle(f"Appartement avec {test}", "")
        print(f"   '{test}' ‚Üí {result['vue']} (score: {result['details']['vue_score']})")
    
    # Test de d√©tection d'exposition
    print(f"\nüß≠ Test de d√©tection d'exposition:")
    exposition_tests = [
        "exposition Sud",
        "orientation Ouest",
        "exposition Nord",
        "exposition Sud-Ouest"
    ]
    
    for test in exposition_tests:
        result = extractor.extract_exposition_textuelle(f"Appartement avec {test}", "")
        print(f"   '{test}' ‚Üí {result['exposition']} (tier: {result['tier']})")

if __name__ == "__main__":
    # D√©monstration principale
    demo_exposition_system()
    
    # D√©monstration de l'int√©gration
    demo_scoring_integration()
    
    # D√©monstration des fonctionnalit√©s avanc√©es
    demo_advanced_features()
    
    print(f"\nüéâ D√âMONSTRATION TERMIN√âE!")
    print("Le syst√®me d'extraction d'exposition est pr√™t pour la production !")
