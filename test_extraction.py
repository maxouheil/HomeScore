#!/usr/bin/env python3
"""
Script de test pour l'extraction des donn√©es d'un appartement sp√©cifique
"""

import asyncio
import json
import re
from playwright.async_api import async_playwright
from dotenv import load_dotenv

load_dotenv()

async def test_apartment_extraction():
    """Test l'extraction des donn√©es d'un appartement sp√©cifique"""
    
    apartment_url = "https://www.jinka.fr/alert_result?token=26c2ec3064303aa68ffa43f7c6518733&ad=90931157&from=dashboard_card&from_alert_filter=all&from_alert_page=1"
    
    print(f"üîç Test d'extraction pour: {apartment_url}")
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context()
        page = await context.new_page()
        
        try:
            # Aller sur la page de l'appartement
            await page.goto(apartment_url)
            await page.wait_for_load_state('networkidle')
            await page.wait_for_timeout(3000)
            
            print("\n" + "="*60)
            print("üìä EXTRACTION DES DONN√âES")
            print("="*60)
            
            # 1. PRIX - Facile
            print("\nüí∞ PRIX:")
            try:
                # Essayer diff√©rents s√©lecteurs pour le prix
                price_selectors = [
                    '.hmmXKG',
                    '[class*="price"]',
                    'text=/\\d+\\s*‚Ç¨/',
                    'h1:has-text("‚Ç¨")',
                    'h2:has-text("‚Ç¨")'
                ]
                
                prix_trouve = False
                for selector in price_selectors:
                    try:
                        element = page.locator(selector).first
                        if await element.count() > 0:
                            text = await element.text_content()
                            if text and '‚Ç¨' in text:
                                print(f"   ‚úÖ S√©lecteur '{selector}': {text.strip()}")
                                prix_trouve = True
                                break
                    except:
                        continue
                
                if not prix_trouve:
                    print("   ‚ùå Prix non trouv√©")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur prix: {e}")
            
            # 2. TAILLE - Facile
            print("\nüìê TAILLE:")
            try:
                # Chercher la surface dans diff√©rents formats
                surface_patterns = [
                    r'(\d+)\s*m¬≤',
                    r'(\d+)\s*m2',
                    r'(\d+)\s*m√®tres? carr√©s?'
                ]
                
                surface_trouvee = False
                page_content = await page.content()
                
                for pattern in surface_patterns:
                    matches = re.findall(pattern, page_content, re.IGNORECASE)
                    if matches:
                        print(f"   ‚úÖ Pattern '{pattern}': {matches[0]} m¬≤")
                        surface_trouvee = True
                        break
                
                if not surface_trouvee:
                    print("   ‚ùå Surface non trouv√©e")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur surface: {e}")
            
            # 3. √âTAGE - Facile
            print("\nüè¢ √âTAGE:")
            try:
                # Chercher l'√©tage dans diff√©rents formats
                etage_patterns = [
                    r'(\d+)(?:er?|e|√®me?)\s*√©tage',
                    r'√©tage\s*(\d+)',
                    r'(\d+)(?:er?|e|√®me?)\s*√©t\.',
                    r'RDC|rez-de-chauss√©e|rez de chauss√©e'
                ]
                
                etage_trouve = False
                page_content = await page.content()
                
                for pattern in etage_patterns:
                    matches = re.findall(pattern, page_content, re.IGNORECASE)
                    if matches:
                        if pattern == 'RDC|rez-de-chauss√©e|rez de chauss√©e':
                            print(f"   ‚úÖ Pattern '{pattern}': RDC")
                        else:
                            print(f"   ‚úÖ Pattern '{pattern}': {matches[0]}e √©tage")
                        etage_trouve = True
                        break
                
                if not etage_trouve:
                    print("   ‚ùå √âtage non trouv√©")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur √©tage: {e}")
            
            # 4. LOCALISATION - Semi-facile (adresse exacte)
            print("\nüìç LOCALISATION (adresse exacte):")
            try:
                # R√©cup√©rer tout le contenu de la page
                page_text = await page.text_content('body')
                
                # Chercher l'adresse exacte avec diff√©rents patterns
                address_patterns = [
                    r'(\d+[,\s]*[a-zA-Z\s]*[Rr]ue[^,\n]*)',
                    r'(\d+[,\s]*[a-zA-Z\s]*[Aa]venue[^,\n]*)',
                    r'(\d+[,\s]*[a-zA-Z\s]*[Bb]oulevard[^,\n]*)',
                    r'(\d+[,\s]*[a-zA-Z\s]*[Pp]lace[^,\n]*)',
                    r'(\d+[,\s]*[a-zA-Z\s]*[Cc]ours[^,\n]*)',
                    r'(\d+[,\s]*[a-zA-Z\s]*[Vv]illa[^,\n]*)',
                    r'(\d+[,\s]*[a-zA-Z\s]*[Ii]mpasse[^,\n]*)',
                    r'(\d+[,\s]*[a-zA-Z\s]*[Aa]ll√©e[^,\n]*)',
                    r'(\d+[,\s]*[a-zA-Z\s]*[Pp]assage[^,\n]*)',
                    r'(\d+[,\s]*[a-zA-Z\s]*[Cc]hemin[^,\n]*)'
                ]
                
                adresses_trouvees = []
                for pattern in address_patterns:
                    matches = re.findall(pattern, page_text, re.IGNORECASE)
                    for match in matches:
                        # Nettoyer l'adresse
                        clean_addr = re.sub(r'\s+', ' ', match.strip())
                        if len(clean_addr) > 5 and clean_addr not in adresses_trouvees:
                            adresses_trouvees.append(clean_addr)
                
                if adresses_trouvees:
                    print(f"   ‚úÖ Adresses trouv√©es:")
                    for i, addr in enumerate(adresses_trouvees[:3], 1):  # Afficher les 3 premi√®res
                        print(f"      {i}. {addr}")
                else:
                    print("   ‚ùå Aucune adresse exacte trouv√©e")
                    
                    # Debug: chercher tous les patterns num√©riques + texte
                    print("   üîç Debug - Patterns num√©riques trouv√©s:")
                    numeric_patterns = re.findall(r'\d+[a-zA-Z\s]{3,30}', page_text)
                    for pattern in numeric_patterns[:10]:  # Afficher les 10 premiers
                        if len(pattern.strip()) > 5:
                            print(f"      - {pattern.strip()}")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur localisation: {e}")
            
            # 5. STYLE - Semi-facile (mots-cl√©s dans description)
            print("\nüèõÔ∏è STYLE (mots-cl√©s haussmanniens):")
            try:
                # Mots-cl√©s haussmanniens √©tendus
                haussmann_keywords = {
                    'architectural': [
                        'haussmannien', 'haussmannienne', 'haussmann',
                        'moulures', 'moulure', 'moulur√©', 'moulur√©e',
                        'chemin√©e', 'chemin√©es', 'chemin√©e de marbre',
                        'parquet', 'parquets', 'parquet d\'origine', 'parquet ancien',
                        'corniches', 'corniche', 'corniche moulur√©e',
                        'rosaces', 'rosace', 'rosace de plafond',
                        'balcon', 'balcons', 'balcon en fer forg√©', 'balcon forg√©',
                        'fer forg√©', 'fer forg√©e', 'grille en fer forg√©',
                        'hauteur sous plafond', 'haut plafond', 'plafond haut',
                        'escalier', 'escaliers', 'escalier d\'honneur'
                    ],
                    'caract√®re': [
                        'caract√®re', 'caract√®res', 'caract√©ristique',
                        'restaur√©', 'restaur√©e', 'r√©nov√©', 'r√©nov√©e',
                        'authentique', 'authentiques', 'original', 'originale',
                        '√©poque', 'p√©riode', '√©poque haussmannienne',
                        'ancien', 'ancienne', 'ancien immeuble',
                        'vieux', 'vieille', 'vieux immeuble',
                        'charme', 'charmant', 'charmante',
                        'prestige', 'prestigieux', 'prestigieuse',
                        'noble', 'noblesse', 'noblesse des mat√©riaux'
                    ],
                    'mat√©riaux': [
                        'marbre', 'marbres', 'marbre de carrare',
                        'bois', 'bois noble', 'bois pr√©cieux',
                        'pierre', 'pierres', 'pierre de taille',
                        'stuc', 'stucs', 'stuc d√©coratif',
                        'pl√¢tre', 'pl√¢tres', 'pl√¢tre moul√©',
                        'm√©tal', 'm√©taux', 'm√©tal forg√©'
                    ],
                    'd√©tails': [
                        'moulure', 'moulures', 'moulure de plafond',
                        'd√©coration', 'd√©coratif', 'd√©corative',
                        'ornement', 'ornements', 'ornemental',
                        'd√©tail', 'd√©tails', 'd√©tail architectural',
                        'finesse', 'finesses', 'finitions',
                        '√©l√©gance', '√©l√©gant', '√©l√©gante'
                    ]
                }
                
                # R√©cup√©rer la description compl√®te
                description_selectors = [
                    '.fz-16.sc-bxivhb.fcnykg',
                    '[class*="description"]',
                    'p:has-text("Globalstone")',
                    'text=/Globalstone/',
                    'div:has-text("Globalstone")',
                    'section:has-text("Globalstone")'
                ]
                
                description_text = ""
                for selector in description_selectors:
                    try:
                        element = page.locator(selector).first
                        if await element.count() > 0:
                            description_text = await element.text_content()
                            if len(description_text) > 50:  # S'assurer qu'on a une vraie description
                                break
                    except:
                        continue
                
                if description_text:
                    print(f"   üìù Description trouv√©e ({len(description_text)} caract√®res)")
                    
                    # Chercher les mots-cl√©s par cat√©gorie
                    found_by_category = {}
                    total_found = 0
                    
                    for category, keywords in haussmann_keywords.items():
                        found_in_category = []
                        for keyword in keywords:
                            if keyword.lower() in description_text.lower():
                                found_in_category.append(keyword)
                                total_found += 1
                        
                        if found_in_category:
                            found_by_category[category] = found_in_category
                    
                    if found_by_category:
                        print(f"   ‚úÖ Mots-cl√©s haussmanniens trouv√©s ({total_found} total):")
                        for category, keywords in found_by_category.items():
                            print(f"      {category.title()}: {', '.join(keywords)}")
                        
                        # Calculer un score de style
                        style_score = min(100, (total_found * 10) + 20)  # 10 points par mot-cl√© + 20 de base
                        print(f"   üéØ Score de style estim√©: {style_score}/100")
                    else:
                        print("   ‚ùå Aucun mot-cl√© haussmannien trouv√©")
                        print("   üîç Recherche de mots g√©n√©riques...")
                        
                        # Chercher des mots g√©n√©riques qui pourraient indiquer un style
                        generic_style_words = ['duplex', 'contemporain', 'moderne', 'design', 'architecte']
                        found_generic = [word for word in generic_style_words if word.lower() in description_text.lower()]
                        if found_generic:
                            print(f"      Mots g√©n√©riques trouv√©s: {', '.join(found_generic)}")
                    
                    # Afficher un extrait de la description
                    print(f"   üìÑ Extrait: {description_text[:300]}...")
                else:
                    print("   ‚ùå Description non trouv√©e")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur style: {e}")
            
            # 6. AUTRES DONN√âES UTILES
            print("\nüîç AUTRES DONN√âES:")
            try:
                # Pi√®ces
                pieces_match = re.search(r'(\d+)\s*pi√®ces?', page_content, re.IGNORECASE)
                if pieces_match:
                    print(f"   üè† Pi√®ces: {pieces_match.group(1)}")
                
                # Chambres
                chambres_match = re.search(r'(\d+)\s*chambres?', page_content, re.IGNORECASE)
                if chambres_match:
                    print(f"   üõèÔ∏è Chambres: {chambres_match.group(1)}")
                
                # Cuisine
                if 'cuisine am√©ricaine' in page_content.lower():
                    print("   üç≥ Cuisine: Am√©ricaine ouverte")
                elif 'cuisine ouverte' in page_content.lower():
                    print("   üç≥ Cuisine: Ouverte")
                elif 'cuisine ferm√©e' in page_content.lower():
                    print("   üç≥ Cuisine: Ferm√©e")
                else:
                    print("   üç≥ Cuisine: Type non sp√©cifi√©")
                
                # Luminosit√©
                if 'lumineux' in page_content.lower():
                    print("   ‚òÄÔ∏è Luminosit√©: Lumineux")
                if 'spacieux' in page_content.lower():
                    print("   üìè Espace: Spacieux")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur autres donn√©es: {e}")
            
            print("\n" + "="*60)
            print("‚úÖ Test d'extraction termin√©")
            print("="*60)
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©rale: {e}")
        
        finally:
            await browser.close()

if __name__ == "__main__":
    asyncio.run(test_apartment_extraction())
